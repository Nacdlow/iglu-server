// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package public generated by go-bindata.// sources:
// public/bindata.go
// public/css/bootstrap.min.css
// public/css/main.css
// public/css/mdb.min.css
// public/css/normalize-8.0.1.min.css
// public/css/simulator.main.css
// public/font/roboto/Roboto-Bold.eot
// public/font/roboto/Roboto-Bold.ttf
// public/font/roboto/Roboto-Bold.woff
// public/font/roboto/Roboto-Bold.woff2
// public/font/roboto/Roboto-Light.eot
// public/font/roboto/Roboto-Light.ttf
// public/font/roboto/Roboto-Light.woff
// public/font/roboto/Roboto-Light.woff2
// public/font/roboto/Roboto-Medium.eot
// public/font/roboto/Roboto-Medium.ttf
// public/font/roboto/Roboto-Medium.woff
// public/font/roboto/Roboto-Medium.woff2
// public/font/roboto/Roboto-Regular.eot
// public/font/roboto/Roboto-Regular.ttf
// public/font/roboto/Roboto-Regular.woff
// public/font/roboto/Roboto-Regular.woff2
// public/font/roboto/Roboto-Thin.eot
// public/font/roboto/Roboto-Thin.ttf
// public/font/roboto/Roboto-Thin.woff
// public/font/roboto/Roboto-Thin.woff2
// public/fontawesome/LICENSE.txt
// public/fontawesome/css/all.min.css
// public/fontawesome/webfonts/fa-brands-400.eot
// public/fontawesome/webfonts/fa-brands-400.svg
// public/fontawesome/webfonts/fa-brands-400.ttf
// public/fontawesome/webfonts/fa-brands-400.woff
// public/fontawesome/webfonts/fa-brands-400.woff2
// public/fontawesome/webfonts/fa-regular-400.eot
// public/fontawesome/webfonts/fa-regular-400.svg
// public/fontawesome/webfonts/fa-regular-400.ttf
// public/fontawesome/webfonts/fa-regular-400.woff
// public/fontawesome/webfonts/fa-regular-400.woff2
// public/fontawesome/webfonts/fa-solid-900.eot
// public/fontawesome/webfonts/fa-solid-900.svg
// public/fontawesome/webfonts/fa-solid-900.ttf
// public/fontawesome/webfonts/fa-solid-900.woff
// public/fontawesome/webfonts/fa-solid-900.woff2
// public/img/404.gif
// public/img/Simulator.htm
// public/img/ac_unit-24px.svg
// public/img/add_circle_outline-24px.svg
// public/img/add_white.svg
// public/img/arrow_back-24px.svg
// public/img/bathtub-24px.svg
// public/img/border_all-24px.svg
// public/img/brightness_2-24px.svg
// public/img/brightness_4-24px.svg
// public/img/brightness_5-24px.svg
// public/img/crop_5_4-24px.svg
// public/img/desktop_windows-24px.svg
// public/img/favicon.ico
// public/img/favicon.png
// public/img/favicon2.png
// public/img/favorite_border-24px.svg
// public/img/floorPlan .png
// public/img/house-24px.svg
// public/img/icons/icon-128x128.png
// public/img/icons/icon-144x144.png
// public/img/icons/icon-152x152.png
// public/img/icons/icon-192x192.png
// public/img/icons/icon-384x384.png
// public/img/icons/icon-512x512.png
// public/img/icons/icon-72x72.png
// public/img/icons/icon-96x96.png
// public/img/iglu-bw.svg
// public/img/iglu-dark.svg
// public/img/iglu-light.svg
// public/img/iglu-smol.svg
// public/img/iglu-wb.svg
// public/img/menu_book-24px.svg
// public/img/more_horiz-24px.svg
// public/img/notifications-24px.svg
// public/img/peng-user.jpg
// public/img/power_settings_new-24px.svg
// public/img/round_add_circle_outline_white_18dp.png
// public/img/speaker-24px.svg
// public/img/star-24px.svg
// public/img/star_border-24px.svg
// public/img/toggle_off-24px.svg
// public/img/toggle_on-24px.svg
// public/img/toys-24px.svg
// public/img/tv-24px.svg
// public/img/volume_up-24px.svg
// public/img/whiteAdd.png
// public/js/bootstrap.min.js
// public/js/jquery.min.js
// public/js/main.js
// public/js/mdb.min.js
// public/js/popper.min.js
// public/js/skycons.js
// public/js/sw.js
// public/manifest.json
package public

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// bindataGo reads file data from disk. It returns an error on failure.
func bindataGo() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/bindata.go"
	name := "bindata.go"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssBootstrapMinCss reads file data from disk. It returns an error on failure.
func cssBootstrapMinCss() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/css/bootstrap.min.css"
	name := "css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssMainCss reads file data from disk. It returns an error on failure.
func cssMainCss() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/css/main.css"
	name := "css/main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssMdbMinCss reads file data from disk. It returns an error on failure.
func cssMdbMinCss() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/css/mdb.min.css"
	name := "css/mdb.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssNormalize801MinCss reads file data from disk. It returns an error on failure.
func cssNormalize801MinCss() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/css/normalize-8.0.1.min.css"
	name := "css/normalize-8.0.1.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssSimulatorMainCss reads file data from disk. It returns an error on failure.
func cssSimulatorMainCss() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/css/simulator.main.css"
	name := "css/simulator.main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoBoldEot reads file data from disk. It returns an error on failure.
func fontRobotoRobotoBoldEot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Bold.eot"
	name := "font/roboto/Roboto-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoBoldTtf reads file data from disk. It returns an error on failure.
func fontRobotoRobotoBoldTtf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Bold.ttf"
	name := "font/roboto/Roboto-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoBoldWoff reads file data from disk. It returns an error on failure.
func fontRobotoRobotoBoldWoff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Bold.woff"
	name := "font/roboto/Roboto-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoBoldWoff2 reads file data from disk. It returns an error on failure.
func fontRobotoRobotoBoldWoff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Bold.woff2"
	name := "font/roboto/Roboto-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoLightEot reads file data from disk. It returns an error on failure.
func fontRobotoRobotoLightEot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Light.eot"
	name := "font/roboto/Roboto-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoLightTtf reads file data from disk. It returns an error on failure.
func fontRobotoRobotoLightTtf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Light.ttf"
	name := "font/roboto/Roboto-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoLightWoff reads file data from disk. It returns an error on failure.
func fontRobotoRobotoLightWoff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Light.woff"
	name := "font/roboto/Roboto-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoLightWoff2 reads file data from disk. It returns an error on failure.
func fontRobotoRobotoLightWoff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Light.woff2"
	name := "font/roboto/Roboto-Light.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoMediumEot reads file data from disk. It returns an error on failure.
func fontRobotoRobotoMediumEot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Medium.eot"
	name := "font/roboto/Roboto-Medium.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoMediumTtf reads file data from disk. It returns an error on failure.
func fontRobotoRobotoMediumTtf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Medium.ttf"
	name := "font/roboto/Roboto-Medium.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoMediumWoff reads file data from disk. It returns an error on failure.
func fontRobotoRobotoMediumWoff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Medium.woff"
	name := "font/roboto/Roboto-Medium.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoMediumWoff2 reads file data from disk. It returns an error on failure.
func fontRobotoRobotoMediumWoff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Medium.woff2"
	name := "font/roboto/Roboto-Medium.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoRegularEot reads file data from disk. It returns an error on failure.
func fontRobotoRobotoRegularEot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Regular.eot"
	name := "font/roboto/Roboto-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoRegularTtf reads file data from disk. It returns an error on failure.
func fontRobotoRobotoRegularTtf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Regular.ttf"
	name := "font/roboto/Roboto-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoRegularWoff reads file data from disk. It returns an error on failure.
func fontRobotoRobotoRegularWoff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Regular.woff"
	name := "font/roboto/Roboto-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoRegularWoff2 reads file data from disk. It returns an error on failure.
func fontRobotoRobotoRegularWoff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Regular.woff2"
	name := "font/roboto/Roboto-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoThinEot reads file data from disk. It returns an error on failure.
func fontRobotoRobotoThinEot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Thin.eot"
	name := "font/roboto/Roboto-Thin.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoThinTtf reads file data from disk. It returns an error on failure.
func fontRobotoRobotoThinTtf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Thin.ttf"
	name := "font/roboto/Roboto-Thin.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoThinWoff reads file data from disk. It returns an error on failure.
func fontRobotoRobotoThinWoff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Thin.woff"
	name := "font/roboto/Roboto-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontRobotoRobotoThinWoff2 reads file data from disk. It returns an error on failure.
func fontRobotoRobotoThinWoff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/font/roboto/Roboto-Thin.woff2"
	name := "font/roboto/Roboto-Thin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeLicenseTxt reads file data from disk. It returns an error on failure.
func fontawesomeLicenseTxt() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/LICENSE.txt"
	name := "fontawesome/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeCssAllMinCss reads file data from disk. It returns an error on failure.
func fontawesomeCssAllMinCss() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/css/all.min.css"
	name := "fontawesome/css/all.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaBrands400Eot reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaBrands400Eot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-brands-400.eot"
	name := "fontawesome/webfonts/fa-brands-400.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaBrands400Svg reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaBrands400Svg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-brands-400.svg"
	name := "fontawesome/webfonts/fa-brands-400.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaBrands400Ttf reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaBrands400Ttf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-brands-400.ttf"
	name := "fontawesome/webfonts/fa-brands-400.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaBrands400Woff reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaBrands400Woff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-brands-400.woff"
	name := "fontawesome/webfonts/fa-brands-400.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaBrands400Woff2 reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaBrands400Woff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-brands-400.woff2"
	name := "fontawesome/webfonts/fa-brands-400.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaRegular400Eot reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaRegular400Eot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-regular-400.eot"
	name := "fontawesome/webfonts/fa-regular-400.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaRegular400Svg reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaRegular400Svg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-regular-400.svg"
	name := "fontawesome/webfonts/fa-regular-400.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaRegular400Ttf reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaRegular400Ttf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-regular-400.ttf"
	name := "fontawesome/webfonts/fa-regular-400.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaRegular400Woff reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaRegular400Woff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-regular-400.woff"
	name := "fontawesome/webfonts/fa-regular-400.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaRegular400Woff2 reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaRegular400Woff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-regular-400.woff2"
	name := "fontawesome/webfonts/fa-regular-400.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaSolid900Eot reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaSolid900Eot() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-solid-900.eot"
	name := "fontawesome/webfonts/fa-solid-900.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaSolid900Svg reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaSolid900Svg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-solid-900.svg"
	name := "fontawesome/webfonts/fa-solid-900.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaSolid900Ttf reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaSolid900Ttf() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-solid-900.ttf"
	name := "fontawesome/webfonts/fa-solid-900.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaSolid900Woff reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaSolid900Woff() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-solid-900.woff"
	name := "fontawesome/webfonts/fa-solid-900.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontawesomeWebfontsFaSolid900Woff2 reads file data from disk. It returns an error on failure.
func fontawesomeWebfontsFaSolid900Woff2() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/fontawesome/webfonts/fa-solid-900.woff2"
	name := "fontawesome/webfonts/fa-solid-900.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// img404Gif reads file data from disk. It returns an error on failure.
func img404Gif() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/404.gif"
	name := "img/404.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgSimulatorHtm reads file data from disk. It returns an error on failure.
func imgSimulatorHtm() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/Simulator.htm"
	name := "img/Simulator.htm"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgAc_unit24pxSvg reads file data from disk. It returns an error on failure.
func imgAc_unit24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/ac_unit-24px.svg"
	name := "img/ac_unit-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgAdd_circle_outline24pxSvg reads file data from disk. It returns an error on failure.
func imgAdd_circle_outline24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/add_circle_outline-24px.svg"
	name := "img/add_circle_outline-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgAdd_whiteSvg reads file data from disk. It returns an error on failure.
func imgAdd_whiteSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/add_white.svg"
	name := "img/add_white.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgArrow_back24pxSvg reads file data from disk. It returns an error on failure.
func imgArrow_back24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/arrow_back-24px.svg"
	name := "img/arrow_back-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgBathtub24pxSvg reads file data from disk. It returns an error on failure.
func imgBathtub24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/bathtub-24px.svg"
	name := "img/bathtub-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgBorder_all24pxSvg reads file data from disk. It returns an error on failure.
func imgBorder_all24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/border_all-24px.svg"
	name := "img/border_all-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgBrightness_224pxSvg reads file data from disk. It returns an error on failure.
func imgBrightness_224pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/brightness_2-24px.svg"
	name := "img/brightness_2-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgBrightness_424pxSvg reads file data from disk. It returns an error on failure.
func imgBrightness_424pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/brightness_4-24px.svg"
	name := "img/brightness_4-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgBrightness_524pxSvg reads file data from disk. It returns an error on failure.
func imgBrightness_524pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/brightness_5-24px.svg"
	name := "img/brightness_5-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgCrop_5_424pxSvg reads file data from disk. It returns an error on failure.
func imgCrop_5_424pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/crop_5_4-24px.svg"
	name := "img/crop_5_4-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgDesktop_windows24pxSvg reads file data from disk. It returns an error on failure.
func imgDesktop_windows24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/desktop_windows-24px.svg"
	name := "img/desktop_windows-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFaviconIco reads file data from disk. It returns an error on failure.
func imgFaviconIco() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/favicon.ico"
	name := "img/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFaviconPng reads file data from disk. It returns an error on failure.
func imgFaviconPng() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/favicon.png"
	name := "img/favicon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFavicon2Png reads file data from disk. It returns an error on failure.
func imgFavicon2Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/favicon2.png"
	name := "img/favicon2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFavorite_border24pxSvg reads file data from disk. It returns an error on failure.
func imgFavorite_border24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/favorite_border-24px.svg"
	name := "img/favorite_border-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFloorplanPng reads file data from disk. It returns an error on failure.
func imgFloorplanPng() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/floorPlan .png"
	name := "img/floorPlan .png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgHouse24pxSvg reads file data from disk. It returns an error on failure.
func imgHouse24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/house-24px.svg"
	name := "img/house-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon128x128Png reads file data from disk. It returns an error on failure.
func imgIconsIcon128x128Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-128x128.png"
	name := "img/icons/icon-128x128.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon144x144Png reads file data from disk. It returns an error on failure.
func imgIconsIcon144x144Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-144x144.png"
	name := "img/icons/icon-144x144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon152x152Png reads file data from disk. It returns an error on failure.
func imgIconsIcon152x152Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-152x152.png"
	name := "img/icons/icon-152x152.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon192x192Png reads file data from disk. It returns an error on failure.
func imgIconsIcon192x192Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-192x192.png"
	name := "img/icons/icon-192x192.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon384x384Png reads file data from disk. It returns an error on failure.
func imgIconsIcon384x384Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-384x384.png"
	name := "img/icons/icon-384x384.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon512x512Png reads file data from disk. It returns an error on failure.
func imgIconsIcon512x512Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-512x512.png"
	name := "img/icons/icon-512x512.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon72x72Png reads file data from disk. It returns an error on failure.
func imgIconsIcon72x72Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-72x72.png"
	name := "img/icons/icon-72x72.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIconsIcon96x96Png reads file data from disk. It returns an error on failure.
func imgIconsIcon96x96Png() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/icons/icon-96x96.png"
	name := "img/icons/icon-96x96.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIgluBwSvg reads file data from disk. It returns an error on failure.
func imgIgluBwSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/iglu-bw.svg"
	name := "img/iglu-bw.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIgluDarkSvg reads file data from disk. It returns an error on failure.
func imgIgluDarkSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/iglu-dark.svg"
	name := "img/iglu-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIgluLightSvg reads file data from disk. It returns an error on failure.
func imgIgluLightSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/iglu-light.svg"
	name := "img/iglu-light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIgluSmolSvg reads file data from disk. It returns an error on failure.
func imgIgluSmolSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/iglu-smol.svg"
	name := "img/iglu-smol.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIgluWbSvg reads file data from disk. It returns an error on failure.
func imgIgluWbSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/iglu-wb.svg"
	name := "img/iglu-wb.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgMenu_book24pxSvg reads file data from disk. It returns an error on failure.
func imgMenu_book24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/menu_book-24px.svg"
	name := "img/menu_book-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgMore_horiz24pxSvg reads file data from disk. It returns an error on failure.
func imgMore_horiz24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/more_horiz-24px.svg"
	name := "img/more_horiz-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgNotifications24pxSvg reads file data from disk. It returns an error on failure.
func imgNotifications24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/notifications-24px.svg"
	name := "img/notifications-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgPengUserJpg reads file data from disk. It returns an error on failure.
func imgPengUserJpg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/peng-user.jpg"
	name := "img/peng-user.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgPower_settings_new24pxSvg reads file data from disk. It returns an error on failure.
func imgPower_settings_new24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/power_settings_new-24px.svg"
	name := "img/power_settings_new-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgRound_add_circle_outline_white_18dpPng reads file data from disk. It returns an error on failure.
func imgRound_add_circle_outline_white_18dpPng() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/round_add_circle_outline_white_18dp.png"
	name := "img/round_add_circle_outline_white_18dp.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgSpeaker24pxSvg reads file data from disk. It returns an error on failure.
func imgSpeaker24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/speaker-24px.svg"
	name := "img/speaker-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgStar24pxSvg reads file data from disk. It returns an error on failure.
func imgStar24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/star-24px.svg"
	name := "img/star-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgStar_border24pxSvg reads file data from disk. It returns an error on failure.
func imgStar_border24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/star_border-24px.svg"
	name := "img/star_border-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgToggle_off24pxSvg reads file data from disk. It returns an error on failure.
func imgToggle_off24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/toggle_off-24px.svg"
	name := "img/toggle_off-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgToggle_on24pxSvg reads file data from disk. It returns an error on failure.
func imgToggle_on24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/toggle_on-24px.svg"
	name := "img/toggle_on-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgToys24pxSvg reads file data from disk. It returns an error on failure.
func imgToys24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/toys-24px.svg"
	name := "img/toys-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgTv24pxSvg reads file data from disk. It returns an error on failure.
func imgTv24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/tv-24px.svg"
	name := "img/tv-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgVolume_up24pxSvg reads file data from disk. It returns an error on failure.
func imgVolume_up24pxSvg() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/volume_up-24px.svg"
	name := "img/volume_up-24px.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgWhiteaddPng reads file data from disk. It returns an error on failure.
func imgWhiteaddPng() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/img/whiteAdd.png"
	name := "img/whiteAdd.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsBootstrapMinJs reads file data from disk. It returns an error on failure.
func jsBootstrapMinJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/bootstrap.min.js"
	name := "js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsJqueryMinJs reads file data from disk. It returns an error on failure.
func jsJqueryMinJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/jquery.min.js"
	name := "js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsMainJs reads file data from disk. It returns an error on failure.
func jsMainJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/main.js"
	name := "js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsMdbMinJs reads file data from disk. It returns an error on failure.
func jsMdbMinJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/mdb.min.js"
	name := "js/mdb.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsPopperMinJs reads file data from disk. It returns an error on failure.
func jsPopperMinJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/popper.min.js"
	name := "js/popper.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsSkyconsJs reads file data from disk. It returns an error on failure.
func jsSkyconsJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/skycons.js"
	name := "js/skycons.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsSwJs reads file data from disk. It returns an error on failure.
func jsSwJs() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/js/sw.js"
	name := "js/sw.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// manifestJson reads file data from disk. It returns an error on failure.
func manifestJson() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/public/manifest.json"
	name := "manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go":                                  bindataGo,
	"css/bootstrap.min.css":                       cssBootstrapMinCss,
	"css/main.css":                                cssMainCss,
	"css/mdb.min.css":                             cssMdbMinCss,
	"css/normalize-8.0.1.min.css":                 cssNormalize801MinCss,
	"css/simulator.main.css":                      cssSimulatorMainCss,
	"font/roboto/Roboto-Bold.eot":                 fontRobotoRobotoBoldEot,
	"font/roboto/Roboto-Bold.ttf":                 fontRobotoRobotoBoldTtf,
	"font/roboto/Roboto-Bold.woff":                fontRobotoRobotoBoldWoff,
	"font/roboto/Roboto-Bold.woff2":               fontRobotoRobotoBoldWoff2,
	"font/roboto/Roboto-Light.eot":                fontRobotoRobotoLightEot,
	"font/roboto/Roboto-Light.ttf":                fontRobotoRobotoLightTtf,
	"font/roboto/Roboto-Light.woff":               fontRobotoRobotoLightWoff,
	"font/roboto/Roboto-Light.woff2":              fontRobotoRobotoLightWoff2,
	"font/roboto/Roboto-Medium.eot":               fontRobotoRobotoMediumEot,
	"font/roboto/Roboto-Medium.ttf":               fontRobotoRobotoMediumTtf,
	"font/roboto/Roboto-Medium.woff":              fontRobotoRobotoMediumWoff,
	"font/roboto/Roboto-Medium.woff2":             fontRobotoRobotoMediumWoff2,
	"font/roboto/Roboto-Regular.eot":              fontRobotoRobotoRegularEot,
	"font/roboto/Roboto-Regular.ttf":              fontRobotoRobotoRegularTtf,
	"font/roboto/Roboto-Regular.woff":             fontRobotoRobotoRegularWoff,
	"font/roboto/Roboto-Regular.woff2":            fontRobotoRobotoRegularWoff2,
	"font/roboto/Roboto-Thin.eot":                 fontRobotoRobotoThinEot,
	"font/roboto/Roboto-Thin.ttf":                 fontRobotoRobotoThinTtf,
	"font/roboto/Roboto-Thin.woff":                fontRobotoRobotoThinWoff,
	"font/roboto/Roboto-Thin.woff2":               fontRobotoRobotoThinWoff2,
	"fontawesome/LICENSE.txt":                     fontawesomeLicenseTxt,
	"fontawesome/css/all.min.css":                 fontawesomeCssAllMinCss,
	"fontawesome/webfonts/fa-brands-400.eot":      fontawesomeWebfontsFaBrands400Eot,
	"fontawesome/webfonts/fa-brands-400.svg":      fontawesomeWebfontsFaBrands400Svg,
	"fontawesome/webfonts/fa-brands-400.ttf":      fontawesomeWebfontsFaBrands400Ttf,
	"fontawesome/webfonts/fa-brands-400.woff":     fontawesomeWebfontsFaBrands400Woff,
	"fontawesome/webfonts/fa-brands-400.woff2":    fontawesomeWebfontsFaBrands400Woff2,
	"fontawesome/webfonts/fa-regular-400.eot":     fontawesomeWebfontsFaRegular400Eot,
	"fontawesome/webfonts/fa-regular-400.svg":     fontawesomeWebfontsFaRegular400Svg,
	"fontawesome/webfonts/fa-regular-400.ttf":     fontawesomeWebfontsFaRegular400Ttf,
	"fontawesome/webfonts/fa-regular-400.woff":    fontawesomeWebfontsFaRegular400Woff,
	"fontawesome/webfonts/fa-regular-400.woff2":   fontawesomeWebfontsFaRegular400Woff2,
	"fontawesome/webfonts/fa-solid-900.eot":       fontawesomeWebfontsFaSolid900Eot,
	"fontawesome/webfonts/fa-solid-900.svg":       fontawesomeWebfontsFaSolid900Svg,
	"fontawesome/webfonts/fa-solid-900.ttf":       fontawesomeWebfontsFaSolid900Ttf,
	"fontawesome/webfonts/fa-solid-900.woff":      fontawesomeWebfontsFaSolid900Woff,
	"fontawesome/webfonts/fa-solid-900.woff2":     fontawesomeWebfontsFaSolid900Woff2,
	"img/404.gif":                                 img404Gif,
	"img/Simulator.htm":                           imgSimulatorHtm,
	"img/ac_unit-24px.svg":                        imgAc_unit24pxSvg,
	"img/add_circle_outline-24px.svg":             imgAdd_circle_outline24pxSvg,
	"img/add_white.svg":                           imgAdd_whiteSvg,
	"img/arrow_back-24px.svg":                     imgArrow_back24pxSvg,
	"img/bathtub-24px.svg":                        imgBathtub24pxSvg,
	"img/border_all-24px.svg":                     imgBorder_all24pxSvg,
	"img/brightness_2-24px.svg":                   imgBrightness_224pxSvg,
	"img/brightness_4-24px.svg":                   imgBrightness_424pxSvg,
	"img/brightness_5-24px.svg":                   imgBrightness_524pxSvg,
	"img/crop_5_4-24px.svg":                       imgCrop_5_424pxSvg,
	"img/desktop_windows-24px.svg":                imgDesktop_windows24pxSvg,
	"img/favicon.ico":                             imgFaviconIco,
	"img/favicon.png":                             imgFaviconPng,
	"img/favicon2.png":                            imgFavicon2Png,
	"img/favorite_border-24px.svg":                imgFavorite_border24pxSvg,
	"img/floorPlan .png":                          imgFloorplanPng,
	"img/house-24px.svg":                          imgHouse24pxSvg,
	"img/icons/icon-128x128.png":                  imgIconsIcon128x128Png,
	"img/icons/icon-144x144.png":                  imgIconsIcon144x144Png,
	"img/icons/icon-152x152.png":                  imgIconsIcon152x152Png,
	"img/icons/icon-192x192.png":                  imgIconsIcon192x192Png,
	"img/icons/icon-384x384.png":                  imgIconsIcon384x384Png,
	"img/icons/icon-512x512.png":                  imgIconsIcon512x512Png,
	"img/icons/icon-72x72.png":                    imgIconsIcon72x72Png,
	"img/icons/icon-96x96.png":                    imgIconsIcon96x96Png,
	"img/iglu-bw.svg":                             imgIgluBwSvg,
	"img/iglu-dark.svg":                           imgIgluDarkSvg,
	"img/iglu-light.svg":                          imgIgluLightSvg,
	"img/iglu-smol.svg":                           imgIgluSmolSvg,
	"img/iglu-wb.svg":                             imgIgluWbSvg,
	"img/menu_book-24px.svg":                      imgMenu_book24pxSvg,
	"img/more_horiz-24px.svg":                     imgMore_horiz24pxSvg,
	"img/notifications-24px.svg":                  imgNotifications24pxSvg,
	"img/peng-user.jpg":                           imgPengUserJpg,
	"img/power_settings_new-24px.svg":             imgPower_settings_new24pxSvg,
	"img/round_add_circle_outline_white_18dp.png": imgRound_add_circle_outline_white_18dpPng,
	"img/speaker-24px.svg":                        imgSpeaker24pxSvg,
	"img/star-24px.svg":                           imgStar24pxSvg,
	"img/star_border-24px.svg":                    imgStar_border24pxSvg,
	"img/toggle_off-24px.svg":                     imgToggle_off24pxSvg,
	"img/toggle_on-24px.svg":                      imgToggle_on24pxSvg,
	"img/toys-24px.svg":                           imgToys24pxSvg,
	"img/tv-24px.svg":                             imgTv24pxSvg,
	"img/volume_up-24px.svg":                      imgVolume_up24pxSvg,
	"img/whiteAdd.png":                            imgWhiteaddPng,
	"js/bootstrap.min.js":                         jsBootstrapMinJs,
	"js/jquery.min.js":                            jsJqueryMinJs,
	"js/main.js":                                  jsMainJs,
	"js/mdb.min.js":                               jsMdbMinJs,
	"js/popper.min.js":                            jsPopperMinJs,
	"js/skycons.js":                               jsSkyconsJs,
	"js/sw.js":                                    jsSwJs,
	"manifest.json":                               manifestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"css": &bintree{nil, map[string]*bintree{
		"bootstrap.min.css":       &bintree{cssBootstrapMinCss, map[string]*bintree{}},
		"main.css":                &bintree{cssMainCss, map[string]*bintree{}},
		"mdb.min.css":             &bintree{cssMdbMinCss, map[string]*bintree{}},
		"normalize-8.0.1.min.css": &bintree{cssNormalize801MinCss, map[string]*bintree{}},
		"simulator.main.css":      &bintree{cssSimulatorMainCss, map[string]*bintree{}},
	}},
	"font": &bintree{nil, map[string]*bintree{
		"roboto": &bintree{nil, map[string]*bintree{
			"Roboto-Bold.eot":      &bintree{fontRobotoRobotoBoldEot, map[string]*bintree{}},
			"Roboto-Bold.ttf":      &bintree{fontRobotoRobotoBoldTtf, map[string]*bintree{}},
			"Roboto-Bold.woff":     &bintree{fontRobotoRobotoBoldWoff, map[string]*bintree{}},
			"Roboto-Bold.woff2":    &bintree{fontRobotoRobotoBoldWoff2, map[string]*bintree{}},
			"Roboto-Light.eot":     &bintree{fontRobotoRobotoLightEot, map[string]*bintree{}},
			"Roboto-Light.ttf":     &bintree{fontRobotoRobotoLightTtf, map[string]*bintree{}},
			"Roboto-Light.woff":    &bintree{fontRobotoRobotoLightWoff, map[string]*bintree{}},
			"Roboto-Light.woff2":   &bintree{fontRobotoRobotoLightWoff2, map[string]*bintree{}},
			"Roboto-Medium.eot":    &bintree{fontRobotoRobotoMediumEot, map[string]*bintree{}},
			"Roboto-Medium.ttf":    &bintree{fontRobotoRobotoMediumTtf, map[string]*bintree{}},
			"Roboto-Medium.woff":   &bintree{fontRobotoRobotoMediumWoff, map[string]*bintree{}},
			"Roboto-Medium.woff2":  &bintree{fontRobotoRobotoMediumWoff2, map[string]*bintree{}},
			"Roboto-Regular.eot":   &bintree{fontRobotoRobotoRegularEot, map[string]*bintree{}},
			"Roboto-Regular.ttf":   &bintree{fontRobotoRobotoRegularTtf, map[string]*bintree{}},
			"Roboto-Regular.woff":  &bintree{fontRobotoRobotoRegularWoff, map[string]*bintree{}},
			"Roboto-Regular.woff2": &bintree{fontRobotoRobotoRegularWoff2, map[string]*bintree{}},
			"Roboto-Thin.eot":      &bintree{fontRobotoRobotoThinEot, map[string]*bintree{}},
			"Roboto-Thin.ttf":      &bintree{fontRobotoRobotoThinTtf, map[string]*bintree{}},
			"Roboto-Thin.woff":     &bintree{fontRobotoRobotoThinWoff, map[string]*bintree{}},
			"Roboto-Thin.woff2":    &bintree{fontRobotoRobotoThinWoff2, map[string]*bintree{}},
		}},
	}},
	"fontawesome": &bintree{nil, map[string]*bintree{
		"LICENSE.txt": &bintree{fontawesomeLicenseTxt, map[string]*bintree{}},
		"css": &bintree{nil, map[string]*bintree{
			"all.min.css": &bintree{fontawesomeCssAllMinCss, map[string]*bintree{}},
		}},
		"webfonts": &bintree{nil, map[string]*bintree{
			"fa-brands-400.eot":    &bintree{fontawesomeWebfontsFaBrands400Eot, map[string]*bintree{}},
			"fa-brands-400.svg":    &bintree{fontawesomeWebfontsFaBrands400Svg, map[string]*bintree{}},
			"fa-brands-400.ttf":    &bintree{fontawesomeWebfontsFaBrands400Ttf, map[string]*bintree{}},
			"fa-brands-400.woff":   &bintree{fontawesomeWebfontsFaBrands400Woff, map[string]*bintree{}},
			"fa-brands-400.woff2":  &bintree{fontawesomeWebfontsFaBrands400Woff2, map[string]*bintree{}},
			"fa-regular-400.eot":   &bintree{fontawesomeWebfontsFaRegular400Eot, map[string]*bintree{}},
			"fa-regular-400.svg":   &bintree{fontawesomeWebfontsFaRegular400Svg, map[string]*bintree{}},
			"fa-regular-400.ttf":   &bintree{fontawesomeWebfontsFaRegular400Ttf, map[string]*bintree{}},
			"fa-regular-400.woff":  &bintree{fontawesomeWebfontsFaRegular400Woff, map[string]*bintree{}},
			"fa-regular-400.woff2": &bintree{fontawesomeWebfontsFaRegular400Woff2, map[string]*bintree{}},
			"fa-solid-900.eot":     &bintree{fontawesomeWebfontsFaSolid900Eot, map[string]*bintree{}},
			"fa-solid-900.svg":     &bintree{fontawesomeWebfontsFaSolid900Svg, map[string]*bintree{}},
			"fa-solid-900.ttf":     &bintree{fontawesomeWebfontsFaSolid900Ttf, map[string]*bintree{}},
			"fa-solid-900.woff":    &bintree{fontawesomeWebfontsFaSolid900Woff, map[string]*bintree{}},
			"fa-solid-900.woff2":   &bintree{fontawesomeWebfontsFaSolid900Woff2, map[string]*bintree{}},
		}},
	}},
	"img": &bintree{nil, map[string]*bintree{
		"404.gif":                     &bintree{img404Gif, map[string]*bintree{}},
		"Simulator.htm":               &bintree{imgSimulatorHtm, map[string]*bintree{}},
		"ac_unit-24px.svg":            &bintree{imgAc_unit24pxSvg, map[string]*bintree{}},
		"add_circle_outline-24px.svg": &bintree{imgAdd_circle_outline24pxSvg, map[string]*bintree{}},
		"add_white.svg":               &bintree{imgAdd_whiteSvg, map[string]*bintree{}},
		"arrow_back-24px.svg":         &bintree{imgArrow_back24pxSvg, map[string]*bintree{}},
		"bathtub-24px.svg":            &bintree{imgBathtub24pxSvg, map[string]*bintree{}},
		"border_all-24px.svg":         &bintree{imgBorder_all24pxSvg, map[string]*bintree{}},
		"brightness_2-24px.svg":       &bintree{imgBrightness_224pxSvg, map[string]*bintree{}},
		"brightness_4-24px.svg":       &bintree{imgBrightness_424pxSvg, map[string]*bintree{}},
		"brightness_5-24px.svg":       &bintree{imgBrightness_524pxSvg, map[string]*bintree{}},
		"crop_5_4-24px.svg":           &bintree{imgCrop_5_424pxSvg, map[string]*bintree{}},
		"desktop_windows-24px.svg":    &bintree{imgDesktop_windows24pxSvg, map[string]*bintree{}},
		"favicon.ico":                 &bintree{imgFaviconIco, map[string]*bintree{}},
		"favicon.png":                 &bintree{imgFaviconPng, map[string]*bintree{}},
		"favicon2.png":                &bintree{imgFavicon2Png, map[string]*bintree{}},
		"favorite_border-24px.svg":    &bintree{imgFavorite_border24pxSvg, map[string]*bintree{}},
		"floorPlan .png":              &bintree{imgFloorplanPng, map[string]*bintree{}},
		"house-24px.svg":              &bintree{imgHouse24pxSvg, map[string]*bintree{}},
		"icons": &bintree{nil, map[string]*bintree{
			"icon-128x128.png": &bintree{imgIconsIcon128x128Png, map[string]*bintree{}},
			"icon-144x144.png": &bintree{imgIconsIcon144x144Png, map[string]*bintree{}},
			"icon-152x152.png": &bintree{imgIconsIcon152x152Png, map[string]*bintree{}},
			"icon-192x192.png": &bintree{imgIconsIcon192x192Png, map[string]*bintree{}},
			"icon-384x384.png": &bintree{imgIconsIcon384x384Png, map[string]*bintree{}},
			"icon-512x512.png": &bintree{imgIconsIcon512x512Png, map[string]*bintree{}},
			"icon-72x72.png":   &bintree{imgIconsIcon72x72Png, map[string]*bintree{}},
			"icon-96x96.png":   &bintree{imgIconsIcon96x96Png, map[string]*bintree{}},
		}},
		"iglu-bw.svg":                             &bintree{imgIgluBwSvg, map[string]*bintree{}},
		"iglu-dark.svg":                           &bintree{imgIgluDarkSvg, map[string]*bintree{}},
		"iglu-light.svg":                          &bintree{imgIgluLightSvg, map[string]*bintree{}},
		"iglu-smol.svg":                           &bintree{imgIgluSmolSvg, map[string]*bintree{}},
		"iglu-wb.svg":                             &bintree{imgIgluWbSvg, map[string]*bintree{}},
		"menu_book-24px.svg":                      &bintree{imgMenu_book24pxSvg, map[string]*bintree{}},
		"more_horiz-24px.svg":                     &bintree{imgMore_horiz24pxSvg, map[string]*bintree{}},
		"notifications-24px.svg":                  &bintree{imgNotifications24pxSvg, map[string]*bintree{}},
		"peng-user.jpg":                           &bintree{imgPengUserJpg, map[string]*bintree{}},
		"power_settings_new-24px.svg":             &bintree{imgPower_settings_new24pxSvg, map[string]*bintree{}},
		"round_add_circle_outline_white_18dp.png": &bintree{imgRound_add_circle_outline_white_18dpPng, map[string]*bintree{}},
		"speaker-24px.svg":                        &bintree{imgSpeaker24pxSvg, map[string]*bintree{}},
		"star-24px.svg":                           &bintree{imgStar24pxSvg, map[string]*bintree{}},
		"star_border-24px.svg":                    &bintree{imgStar_border24pxSvg, map[string]*bintree{}},
		"toggle_off-24px.svg":                     &bintree{imgToggle_off24pxSvg, map[string]*bintree{}},
		"toggle_on-24px.svg":                      &bintree{imgToggle_on24pxSvg, map[string]*bintree{}},
		"toys-24px.svg":                           &bintree{imgToys24pxSvg, map[string]*bintree{}},
		"tv-24px.svg":                             &bintree{imgTv24pxSvg, map[string]*bintree{}},
		"volume_up-24px.svg":                      &bintree{imgVolume_up24pxSvg, map[string]*bintree{}},
		"whiteAdd.png":                            &bintree{imgWhiteaddPng, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"bootstrap.min.js": &bintree{jsBootstrapMinJs, map[string]*bintree{}},
		"jquery.min.js":    &bintree{jsJqueryMinJs, map[string]*bintree{}},
		"main.js":          &bintree{jsMainJs, map[string]*bintree{}},
		"mdb.min.js":       &bintree{jsMdbMinJs, map[string]*bintree{}},
		"popper.min.js":    &bintree{jsPopperMinJs, map[string]*bintree{}},
		"skycons.js":       &bintree{jsSkyconsJs, map[string]*bintree{}},
		"sw.js":            &bintree{jsSwJs, map[string]*bintree{}},
	}},
	"manifest.json": &bintree{manifestJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
