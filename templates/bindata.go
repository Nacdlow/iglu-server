// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package templates generated by go-bindata.// sources:
// templates/add.html
// templates/add_device.html
// templates/add_room.html
// templates/add_schedule.html
// templates/alerts.html
// templates/base/flash.html
// templates/base/footer.html
// templates/base/head.html
// templates/base/nav.html
// templates/base/scripts.html
// templates/base/tabnav.html
// templates/battery.html
// templates/bindata.go
// templates/blank.html
// templates/cards/light.html
// templates/cards/speaker.html
// templates/cards/temp.html
// templates/cards/tv.html
// templates/dashboard.html
// templates/devices.html
// templates/forgot.html
// templates/index.html
// templates/internal_accounts.html
// templates/notfound.html
// templates/overview.html
// templates/register.html
// templates/rooms.html
// templates/search_device.html
// templates/search_device_list.html
// templates/settings/about.html
// templates/settings/accounts.html
// templates/settings/appearance.html
// templates/settings/del_account.html
// templates/settings/edit_account.html
// templates/settings/plugin_install_confirm.html
// templates/settings/plugins.html
// templates/settings.html
// templates/sim/base/footer.html
// templates/sim/base/head.html
// templates/sim/env_status.html
// templates/sim/index.html
// templates/specificRooms.html
package templates

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// addHtml reads file data from disk. It returns an error on failure.
func addHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/add.html"
	name := "add.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// add_deviceHtml reads file data from disk. It returns an error on failure.
func add_deviceHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/add_device.html"
	name := "add_device.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// add_roomHtml reads file data from disk. It returns an error on failure.
func add_roomHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/add_room.html"
	name := "add_room.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// add_scheduleHtml reads file data from disk. It returns an error on failure.
func add_scheduleHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/add_schedule.html"
	name := "add_schedule.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// alertsHtml reads file data from disk. It returns an error on failure.
func alertsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/alerts.html"
	name := "alerts.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseFlashHtml reads file data from disk. It returns an error on failure.
func baseFlashHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/base/flash.html"
	name := "base/flash.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseFooterHtml reads file data from disk. It returns an error on failure.
func baseFooterHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/base/footer.html"
	name := "base/footer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseHeadHtml reads file data from disk. It returns an error on failure.
func baseHeadHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/base/head.html"
	name := "base/head.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseNavHtml reads file data from disk. It returns an error on failure.
func baseNavHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/base/nav.html"
	name := "base/nav.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseScriptsHtml reads file data from disk. It returns an error on failure.
func baseScriptsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/base/scripts.html"
	name := "base/scripts.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseTabnavHtml reads file data from disk. It returns an error on failure.
func baseTabnavHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/base/tabnav.html"
	name := "base/tabnav.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// batteryHtml reads file data from disk. It returns an error on failure.
func batteryHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/battery.html"
	name := "battery.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataGo reads file data from disk. It returns an error on failure.
func bindataGo() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/bindata.go"
	name := "bindata.go"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// blankHtml reads file data from disk. It returns an error on failure.
func blankHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/blank.html"
	name := "blank.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cardsLightHtml reads file data from disk. It returns an error on failure.
func cardsLightHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/cards/light.html"
	name := "cards/light.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cardsSpeakerHtml reads file data from disk. It returns an error on failure.
func cardsSpeakerHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/cards/speaker.html"
	name := "cards/speaker.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cardsTempHtml reads file data from disk. It returns an error on failure.
func cardsTempHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/cards/temp.html"
	name := "cards/temp.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cardsTvHtml reads file data from disk. It returns an error on failure.
func cardsTvHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/cards/tv.html"
	name := "cards/tv.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashboardHtml reads file data from disk. It returns an error on failure.
func dashboardHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/dashboard.html"
	name := "dashboard.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// devicesHtml reads file data from disk. It returns an error on failure.
func devicesHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/devices.html"
	name := "devices.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// forgotHtml reads file data from disk. It returns an error on failure.
func forgotHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/forgot.html"
	name := "forgot.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// indexHtml reads file data from disk. It returns an error on failure.
func indexHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/index.html"
	name := "index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// internal_accountsHtml reads file data from disk. It returns an error on failure.
func internal_accountsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/internal_accounts.html"
	name := "internal_accounts.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// notfoundHtml reads file data from disk. It returns an error on failure.
func notfoundHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/notfound.html"
	name := "notfound.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// overviewHtml reads file data from disk. It returns an error on failure.
func overviewHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/overview.html"
	name := "overview.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// registerHtml reads file data from disk. It returns an error on failure.
func registerHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/register.html"
	name := "register.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// roomsHtml reads file data from disk. It returns an error on failure.
func roomsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/rooms.html"
	name := "rooms.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// search_deviceHtml reads file data from disk. It returns an error on failure.
func search_deviceHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/search_device.html"
	name := "search_device.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// search_device_listHtml reads file data from disk. It returns an error on failure.
func search_device_listHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/search_device_list.html"
	name := "search_device_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsAboutHtml reads file data from disk. It returns an error on failure.
func settingsAboutHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/about.html"
	name := "settings/about.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsAccountsHtml reads file data from disk. It returns an error on failure.
func settingsAccountsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/accounts.html"
	name := "settings/accounts.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsAppearanceHtml reads file data from disk. It returns an error on failure.
func settingsAppearanceHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/appearance.html"
	name := "settings/appearance.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsDel_accountHtml reads file data from disk. It returns an error on failure.
func settingsDel_accountHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/del_account.html"
	name := "settings/del_account.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsEdit_accountHtml reads file data from disk. It returns an error on failure.
func settingsEdit_accountHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/edit_account.html"
	name := "settings/edit_account.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsPlugin_install_confirmHtml reads file data from disk. It returns an error on failure.
func settingsPlugin_install_confirmHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/plugin_install_confirm.html"
	name := "settings/plugin_install_confirm.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsPluginsHtml reads file data from disk. It returns an error on failure.
func settingsPluginsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings/plugins.html"
	name := "settings/plugins.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// settingsHtml reads file data from disk. It returns an error on failure.
func settingsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/settings.html"
	name := "settings.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// simBaseFooterHtml reads file data from disk. It returns an error on failure.
func simBaseFooterHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/sim/base/footer.html"
	name := "sim/base/footer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// simBaseHeadHtml reads file data from disk. It returns an error on failure.
func simBaseHeadHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/sim/base/head.html"
	name := "sim/base/head.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// simEnv_statusHtml reads file data from disk. It returns an error on failure.
func simEnv_statusHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/sim/env_status.html"
	name := "sim/env_status.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// simIndexHtml reads file data from disk. It returns an error on failure.
func simIndexHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/sim/index.html"
	name := "sim/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// specificroomsHtml reads file data from disk. It returns an error on failure.
func specificroomsHtml() (*asset, error) {
	path := "/home/humaid/uni/y3b/profdev/group-project/nacdlow-server/templates/specificRooms.html"
	name := "specificRooms.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"add.html":                             addHtml,
	"add_device.html":                      add_deviceHtml,
	"add_room.html":                        add_roomHtml,
	"add_schedule.html":                    add_scheduleHtml,
	"alerts.html":                          alertsHtml,
	"base/flash.html":                      baseFlashHtml,
	"base/footer.html":                     baseFooterHtml,
	"base/head.html":                       baseHeadHtml,
	"base/nav.html":                        baseNavHtml,
	"base/scripts.html":                    baseScriptsHtml,
	"base/tabnav.html":                     baseTabnavHtml,
	"battery.html":                         batteryHtml,
	"bindata.go":                           bindataGo,
	"blank.html":                           blankHtml,
	"cards/light.html":                     cardsLightHtml,
	"cards/speaker.html":                   cardsSpeakerHtml,
	"cards/temp.html":                      cardsTempHtml,
	"cards/tv.html":                        cardsTvHtml,
	"dashboard.html":                       dashboardHtml,
	"devices.html":                         devicesHtml,
	"forgot.html":                          forgotHtml,
	"index.html":                           indexHtml,
	"internal_accounts.html":               internal_accountsHtml,
	"notfound.html":                        notfoundHtml,
	"overview.html":                        overviewHtml,
	"register.html":                        registerHtml,
	"rooms.html":                           roomsHtml,
	"search_device.html":                   search_deviceHtml,
	"search_device_list.html":              search_device_listHtml,
	"settings/about.html":                  settingsAboutHtml,
	"settings/accounts.html":               settingsAccountsHtml,
	"settings/appearance.html":             settingsAppearanceHtml,
	"settings/del_account.html":            settingsDel_accountHtml,
	"settings/edit_account.html":           settingsEdit_accountHtml,
	"settings/plugin_install_confirm.html": settingsPlugin_install_confirmHtml,
	"settings/plugins.html":                settingsPluginsHtml,
	"settings.html":                        settingsHtml,
	"sim/base/footer.html":                 simBaseFooterHtml,
	"sim/base/head.html":                   simBaseHeadHtml,
	"sim/env_status.html":                  simEnv_statusHtml,
	"sim/index.html":                       simIndexHtml,
	"specificRooms.html":                   specificroomsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"add.html":          &bintree{addHtml, map[string]*bintree{}},
	"add_device.html":   &bintree{add_deviceHtml, map[string]*bintree{}},
	"add_room.html":     &bintree{add_roomHtml, map[string]*bintree{}},
	"add_schedule.html": &bintree{add_scheduleHtml, map[string]*bintree{}},
	"alerts.html":       &bintree{alertsHtml, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"flash.html":   &bintree{baseFlashHtml, map[string]*bintree{}},
		"footer.html":  &bintree{baseFooterHtml, map[string]*bintree{}},
		"head.html":    &bintree{baseHeadHtml, map[string]*bintree{}},
		"nav.html":     &bintree{baseNavHtml, map[string]*bintree{}},
		"scripts.html": &bintree{baseScriptsHtml, map[string]*bintree{}},
		"tabnav.html":  &bintree{baseTabnavHtml, map[string]*bintree{}},
	}},
	"battery.html": &bintree{batteryHtml, map[string]*bintree{}},
	"bindata.go":   &bintree{bindataGo, map[string]*bintree{}},
	"blank.html":   &bintree{blankHtml, map[string]*bintree{}},
	"cards": &bintree{nil, map[string]*bintree{
		"light.html":   &bintree{cardsLightHtml, map[string]*bintree{}},
		"speaker.html": &bintree{cardsSpeakerHtml, map[string]*bintree{}},
		"temp.html":    &bintree{cardsTempHtml, map[string]*bintree{}},
		"tv.html":      &bintree{cardsTvHtml, map[string]*bintree{}},
	}},
	"dashboard.html":          &bintree{dashboardHtml, map[string]*bintree{}},
	"devices.html":            &bintree{devicesHtml, map[string]*bintree{}},
	"forgot.html":             &bintree{forgotHtml, map[string]*bintree{}},
	"index.html":              &bintree{indexHtml, map[string]*bintree{}},
	"internal_accounts.html":  &bintree{internal_accountsHtml, map[string]*bintree{}},
	"notfound.html":           &bintree{notfoundHtml, map[string]*bintree{}},
	"overview.html":           &bintree{overviewHtml, map[string]*bintree{}},
	"register.html":           &bintree{registerHtml, map[string]*bintree{}},
	"rooms.html":              &bintree{roomsHtml, map[string]*bintree{}},
	"search_device.html":      &bintree{search_deviceHtml, map[string]*bintree{}},
	"search_device_list.html": &bintree{search_device_listHtml, map[string]*bintree{}},
	"settings": &bintree{nil, map[string]*bintree{
		"about.html":                  &bintree{settingsAboutHtml, map[string]*bintree{}},
		"accounts.html":               &bintree{settingsAccountsHtml, map[string]*bintree{}},
		"appearance.html":             &bintree{settingsAppearanceHtml, map[string]*bintree{}},
		"del_account.html":            &bintree{settingsDel_accountHtml, map[string]*bintree{}},
		"edit_account.html":           &bintree{settingsEdit_accountHtml, map[string]*bintree{}},
		"plugin_install_confirm.html": &bintree{settingsPlugin_install_confirmHtml, map[string]*bintree{}},
		"plugins.html":                &bintree{settingsPluginsHtml, map[string]*bintree{}},
	}},
	"settings.html": &bintree{settingsHtml, map[string]*bintree{}},
	"sim": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{simBaseFooterHtml, map[string]*bintree{}},
			"head.html":   &bintree{simBaseHeadHtml, map[string]*bintree{}},
		}},
		"env_status.html": &bintree{simEnv_statusHtml, map[string]*bintree{}},
		"index.html":      &bintree{simIndexHtml, map[string]*bintree{}},
	}},
	"specificRooms.html": &bintree{specificroomsHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
